/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["perspectives-pageworker"] = factory();
	else
		root["perspectives-pageworker"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/page.js":
/*!*********************!*\
  !*** ./src/page.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pageHostingPDRPort)\n/* harmony export */ });\n/* harmony import */ var sharedworker_perspectives_handleclientrequest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sharedworker/perspectives-handleclientrequest.js */ \"../perspectives-sharedworker/dist/perspectives-handleclientrequest.js\");\n/* harmony import */ var sharedworker_perspectives_handleclientrequest_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sharedworker_perspectives_handleclientrequest_js__WEBPACK_IMPORTED_MODULE_0__);\n// BEGIN LICENSE\n// Perspectives Distributed Runtime\n// Copyright (C) 2019 Joop Ringelberg (joopringelberg@perspect.it), Cor Baars\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n//\n// Full text of this license can be found in the LICENSE file in the projects root.\n// END LICENSE\n\n// Notice that even though the method name \"postMessage\" equals that of Window.postMessage, here we deal\n// with MessagePort.postMessage and ServiceWorker.postMessage. These methods have a different interface.\n// See:\n// https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n// https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage\n// https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n//// PERSPECTIVES DISTRIBUTED RUNTIME\n////////////////////////////////////////////////////////////////////////////////\nvar PDRPromise;\n\n////////////////////////////////////////////////////////////////////////////////\n//// STORING PORTS SENT BY CLIENT PAGES\n////////////////////////////////////////////////////////////////////////////////\n// An array of MessageChannel ports.\nvar channels = {};\nvar channelIndex = 1;\n\n////////////////////////////////////////////////////////////////////////////////\n//// PORT TO PAGE THAT HOSTS PDR\n//// RECEIVE PORTS FROM CLIENTS WHEN RUN IN THE MAIN PAGE, RELAYED THROUGH A SERVICE WORKER\n//// This function is passed on by the client in the call configurePDRProxy({pageHostingPDRPort: pageHostingPDRPort})\n//// This function returns a MessagePort as documented here: https://developer.mozilla.org/en-US/docs/Web/API/MessagePort.\n////////////////////////////////////////////////////////////////////////////////\nfunction pageHostingPDRPort(pdr) {\n  // Create a channel.\n  var channel = new MessageChannel();\n  var weHost = false;\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register('perspectives-pagedispatcher.js', {\n      scope: './'\n    }).then(function (registration) {\n      var serviceWorker;\n      if (registration.installing) {\n        serviceWorker = registration.installing;\n      } else if (registration.waiting) {\n        serviceWorker = registration.waiting;\n      } else if (registration.active) {\n        serviceWorker = registration.active;\n      }\n      if (serviceWorker) {\n        // Listen to messages coming in from the serviceWorker.\n        // Notice that all pages that are not the first will never handle a message.\n        // Notice that this handler is on the ServiceWorkerContainer of the page; NOT IN THE SERVICEWORKER ITSELF!\n        navigator.serviceWorker.addEventListener('message', function (event) {\n          switch (event.data.messageType) {\n            case \"youHost\":\n              // This message only arrives to the very first page visiting InPlace.\n              weHost = true;\n              // We've sent ourselves a port.\n              channels[channelIndex] = event.data.port;\n              // Return the channelIndex.\n              channels[channelIndex].postMessage({\n                serviceWorkerMessage: \"channelId\",\n                channelId: 1000000 * channelIndex\n              });\n              // start listening to the new channel, handle requests.\n              // This page must host the PDR.\n              channels[channelIndex].onmessage = function (request) {\n                return sharedworker_perspectives_handleclientrequest_js__WEBPACK_IMPORTED_MODULE_0___default()(pdr, channels, request);\n              };\n              channelIndex = channelIndex + 1;\n              break;\n            case \"relayPort\":\n              // If we are the host, save the port; otherwise ignore.\n              if (weHost) {\n                // the new client (page) sends a port. This is a MessagePort.\n                channels[channelIndex] = event.data.port;\n                // Return the channelIndex.\n                channels[channelIndex].postMessage({\n                  serviceWorkerMessage: \"channelId\",\n                  channelId: 1000000 * channelIndex\n                });\n                // start listening to the new channel, handle requests.\n                channels[channelIndex].onmessage = function (request) {\n                  return sharedworker_perspectives_handleclientrequest_js__WEBPACK_IMPORTED_MODULE_0___default()(pdr, channels, request);\n                };\n                channelIndex = channelIndex + 1;\n              }\n              break;\n          }\n        });\n        if (navigator.serviceWorker.controller) {\n          console.log(\"navigator heeft controler direct na registreren - stuur relayport nu.\");\n          navigator.serviceWorker.controller.postMessage({\n            messageType: \"relayPort\",\n            port: channel.port2\n          }, [channel.port2]);\n        }\n      } else {\n        console.log(\"Could not get serviceWorker from registration for an unknown reason.\");\n      }\n      navigator.serviceWorker.addEventListener(\"controllerchange\", function () {\n        // Send the port to the serviceWorker, to relay it to the page hosting the PDR.\n        // Only the serviceworker knows how many clients it has. If there is but one, it will immediately\n        // return a \"youhost\" message to this listener, which will set 'wehost' to true. \n        // See: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/postMessage\n        console.log(\"Controller change. Stuur relayport nu.\");\n        navigator.serviceWorker.controller.postMessage({\n          messageType: \"relayPort\",\n          port: channel.port2\n        }, [channel.port2]);\n      });\n    })[\"catch\"](function (error) {\n      // Something went wrong during registration. The service-worker.js file\n      // might be unavailable or contain a syntax error.\n      console.log(error);\n    });\n  } else {\n    console.log(\"This browser does not support service workers.\");\n  }\n  // Use port1 in the SharedWorkerChannel.\n  return channel.port1;\n}\n\n//# sourceURL=webpack://perspectives-/./src/page.js?");

/***/ }),

/***/ "../perspectives-sharedworker/dist/perspectives-handleclientrequest.js":
/*!*****************************************************************************!*\
  !*** ../perspectives-sharedworker/dist/perspectives-handleclientrequest.js ***!
  \*****************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*\n * ATTENTION: The \"eval\" devtool has been used (maybe by default in mode: \"development\").\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? 0 : _typeof(exports)) === 'object' && ( false ? 0 : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(self, function () {\n  return /******/function () {\n    // webpackBootstrap\n    /******/\n    \"use strict\";\n\n    /******/\n    var __webpack_modules__ = {\n      /***/\"./src/handleClientRequest.js\": (\n      /*!************************************!*\\\n        !*** ./src/handleClientRequest.js ***!\n        \\************************************/\n      /***/\n      function _src_handleClientRequestJs(__unused_webpack_module, __webpack_exports__, __webpack_require__) {\n        eval(\"__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\\n/* harmony export */   \\\"default\\\": () => (/* binding */ handleClientRequest)\\n/* harmony export */ });\\n// BEGIN LICENSE\\n// Perspectives Distributed Runtime\\n// Copyright (C) 2019 Joop Ringelberg (joopringelberg@perspect.it), Cor Baars\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n//\\n// Full text of this license can be found in the LICENSE file in the projects root.\\n// END LICENSE\\n\\n////////////////////////////////////////////////////////////////////////////////\\n//// INTERNAL CHANNEL\\n////////////////////////////////////////////////////////////////////////////////\\n// `InternalChannelPromise` is a promise that resolves to an InternalChannel that has been configured by the PDR\\n// with three Purescript functions that allow it (the channel) to function as a Purescript Emitter.\\n// It emits client requests to the core, so it connects the SharedWorker to the PDR.\\n// This function is called as a consequence of the evaluation of the function setupApi in the Main module of the PDR.\\n\\nfunction corrId2ChannelId (corrId)\\n{\\n  return Math.floor(corrId / 1000000);\\n}\\n\\n////////////////////////////////////////////////////////////////////////////////\\n//// HANDLE REQUESTS COMING IN THROUGH CHANNELS FROM CLIENTS\\n////////////////////////////////////////////////////////////////////////////////\\nlet pdrResolver, pdrRejecter;\\nlet pdrStartedIsResolved = false;\\nconst pdrStarted = new Promise(function( resolver, rejecter)\\n  {\\n    pdrResolver = resolver;\\n    pdrRejecter = rejecter;\\n  }\\n  );\\n\\n// These calls are implemented in accordance with the types of the functions in the core.\\n// The callbacks are declared as Effects, there, hence we treat them here that way.\\n// We could cheat and provide callbacks that do not return an Effect.\\n// NOTE that requests are received through the Channel Messaging API calls from clients. \\n// `handleClientRequest` deals with them by using the InternalChannel's send function, \\n// that has been connected by the PDR with the stream of requests the PerspectivesAPI handles.\\n// channels is an array of MessagePort objects. See: https://developer.mozilla.org/en-US/docs/Web/API/MessagePort\\nfunction handleClientRequest( pdr, channels, request )\\n{\\n  const req = request.data;\\n  if (req.proxyRequest)\\n  {\\n    // The request can be handled right here in the SharedWorker itself.\\n    switch (req.proxyRequest)\\n    {\\n      case \\\"pdrStarted\\\":\\n        // This will always return an answer: it is not dependent on whether the PDR has actually been started.\\n        channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"pdrStarted\\\", pdrStarted: pdrStartedIsResolved});\\n        break;\\n      case \\\"isUserLoggedIn\\\":\\n        //{proxyRequest: \\\"isUserLoggedIn\\\", channelId: proxy.channelId}\\n        pdr.InternalChannelPromise.then( function ()\\n          {\\n            // We return true because the sharedworker is active.\\n            pdrStarted\\n              .then(() => channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"isUserLoggedIn\\\", isUserLoggedIn: true}))\\n              .catch(() => channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"isUserLoggedIn\\\", isUserLoggedIn: false}));\\n          });\\n        break;\\n      case \\\"resetAccount\\\":\\n        pdr.resetAccount( req.username) (req.pouchdbuser) (req.options)\\n          // eslint-disable-next-line no-unexpected-multiline\\n          (function(success) // (Boolean -> Effect Unit)\\n            {\\n              return function() //  This function is the result of the call to resetAccount: the Effect.\\n              {\\n                channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"resetAccount\\\", resetSuccesful: success });\\n              };\\n            })(); // The core resetAccount function results in an Effect, hence we apply it to return the (boolean) result.\\n        break;\\n      case \\\"reCreateInstances\\\":\\n        pdr.reCreateInstances (req.pouchdbuser) (req.options) \\n          // eslint-disable-next-line no-unexpected-multiline\\n          (function(success) // (Boolean -> Effect Unit)\\n            {\\n              return function() //  This function is the result of the call to reCreateInstances: the Effect.\\n              {\\n                channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"reCreateInstances\\\", reCreateSuccesful: success });\\n              };\\n            })(); // The core reCreateInstances function results in an Effect, hence we apply it to return the (boolean) result.\\n        break;\\n      case \\\"recompileLocalModels\\\":\\n        pdr.recompileLocalModels(req.pouchdbuser) \\n          // eslint-disable-next-line no-unexpected-multiline\\n          (function(success) // (Boolean -> Effect Unit)\\n            {\\n              return function() //  This function is the result of the call to recompileLocalModels: the Effect.\\n              {\\n                channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"recompileLocalModels\\\", recompileSuccesful: success });\\n              };\\n            })(); // The core recompileLocalModels function results in an Effect, hence we apply it to return the (boolean) result.\\n        break;\\n      case \\\"createAccount\\\":\\n        pdr.createAccount( req.username) (req.pouchdbuser) (req.runtimeOptions) (req.identityDocument)\\n          // eslint-disable-next-line no-unexpected-multiline\\n          (function({success, reason}) // ({success :: Boolean, reason :: Nullable String} -> Effect Unit)\\n            {\\n              return function() //  This function is the result of the call to createAccount: the Effect.\\n              {\\n                channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"createAccount\\\", createSuccesful: {success, reason} });\\n              };\\n            })(); // The core createAccount function results in an Effect, hence we apply it to return the (boolean) result.\\n        break;\\n      case \\\"removeAccount\\\":\\n        pdr.removeAccount( req.username) (req.pouchdbuser) \\n          // eslint-disable-next-line no-unexpected-multiline\\n          (function(success) // (Boolean -> Effect Unit)\\n            {\\n              return function() //  This function is the result of the call to removeAccount: the Effect.\\n              {\\n                channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"removeAccount\\\", removeSuccesful: success });\\n              };\\n            })(); // The core removeAccount function results in an Effect, hence we apply it to return the (boolean) result.\\n        break;\\n      case \\\"runPDR\\\":\\n        // runPDR :: UserName -> PouchdbUser RuntimeOptions -> Effect Unit\\n        try\\n          {\\n            pdr.runPDR( req.username) (req.pouchdbuser) (req.options)\\n              // eslint-disable-next-line no-unexpected-multiline\\n              (function(success) // (Boolean -> Effect Unit), the callback.\\n              {\\n                return function() // This function is the Effect that is returned.\\n                {\\n                  if (success)\\n                  {\\n                    pdrStartedIsResolved = true;\\n                    pdrResolver(true);\\n                  }\\n                  else\\n                  {\\n                    pdrRejecter(false);\\n                  }\\n                  channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"runPDR\\\", startSuccesful: success });\\n                  return {};\\n                };\\n              })();\\n            break;\\n          }\\n          catch (e)\\n          {\\n            // Return the error message to the client.\\n            channels[corrId2ChannelId(req.channelId)].postMessage({serviceWorkerMessage: \\\"runPDR\\\", error: e });\\n          }\\n        break;\\n      case \\\"close\\\":\\n        pdr.InternalChannelPromise.then( ic => ic.close() );\\n        break;\\n      case \\\"unsubscribe\\\":\\n        pdr.InternalChannelPromise.then( ic => ic.unsubscribe( req.request ) );\\n        break;\\n    }\\n  }\\n  else\\n  {\\n    // The request represents a call to the PDR.\\n    // The original client callback was saved in the SharedWorkerChannel (on the other side, i.e. the client side) and associated with the corrId.\\n    // Replace the callback with a function that passes on the response to the right channel.\\n    // The SharedWorkerChannel will apply the original client callback.\\n    req.reactStateSetter = function( result )\\n      {\\n        return function()\\n        {\\n          channels[corrId2ChannelId(result.corrId)].postMessage( result );\\n        };\\n      };\\n    // Now call the PDR.\\n    pdr.InternalChannelPromise.then( ic => ic.send( req ) );\\n  }\\n}\\n\\n\\n//# sourceURL=webpack://perspectives-/./src/handleClientRequest.js?\");\n\n        /***/\n      })\n\n      /******/\n    };\n    /************************************************************************/\n    /******/ // The require scope\n    /******/\n    var __nested_webpack_require_11684__ = {};\n    /******/\n    /************************************************************************/\n    /******/ /* webpack/runtime/define property getters */\n    /******/\n    (function () {\n      /******/ // define getter functions for harmony exports\n      /******/__nested_webpack_require_11684__.d = function (exports, definition) {\n        /******/for (var key in definition) {\n          /******/if (__nested_webpack_require_11684__.o(definition, key) && !__nested_webpack_require_11684__.o(exports, key)) {\n            /******/Object.defineProperty(exports, key, {\n              enumerable: true,\n              get: definition[key]\n            });\n            /******/\n          }\n          /******/\n        }\n        /******/\n      };\n      /******/\n    })();\n    /******/\n    /******/ /* webpack/runtime/hasOwnProperty shorthand */\n    /******/\n    (function () {\n      /******/__nested_webpack_require_11684__.o = function (obj, prop) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n      };\n      /******/\n    })();\n    /******/\n    /******/ /* webpack/runtime/make namespace object */\n    /******/\n    (function () {\n      /******/ // define __esModule on exports\n      /******/__nested_webpack_require_11684__.r = function (exports) {\n        /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n    })();\n    /******/\n    /************************************************************************/\n    /******/\n    /******/ // startup\n    /******/ // Load entry module and return exports\n    /******/ // This entry module can't be inlined because the eval devtool is used.\n    /******/\n    var __nested_webpack_exports__ = {};\n    /******/\n    __webpack_modules__[\"./src/handleClientRequest.js\"](0, __nested_webpack_exports__, __nested_webpack_require_11684__);\n    /******/\n    /******/\n    return __nested_webpack_exports__;\n    /******/\n  }();\n});\n\n//# sourceURL=webpack://perspectives-/../perspectives-sharedworker/dist/perspectives-handleclientrequest.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/page.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});